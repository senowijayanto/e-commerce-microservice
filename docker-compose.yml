version: '3'

services:

  # Auth Service
  auth_service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth_service
    ports:
      - "8081:8080"
    depends_on:
      - mongodb_auth

  # Product Service
  product_service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product_service
    ports:
      - "8082:8080"
    depends_on:
      - mongodb_product

  # Order Service
  order_service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order_service
    ports:
      - "8083:8080"
    depends_on:
      - mongodb_order

  # MongoDB for Auth Service
  mongodb_auth:
    image: mongo:4.4
    container_name: mongodb_auth
    restart: unless-stopped
    ports:
      - 27018:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secret
    volumes:
      - ./auth-service/data:/data/db

  # MongoDB for Product Service
  mongodb_product:
    image: mongo:4.4
    container_name: mongodb_product
    restart: unless-stopped
    ports:
      - 27019:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secret
    volumes:
      - ./product-service/data:/data/db

  # MongoDB for Order Service
  mongodb_order:
    image: mongo:4.4
    container_name: mongodb_order
    restart: unless-stopped
    ports:
      - 27010:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secret
    volumes:
      - ./order-service/data:/data/db
  # RabbitMQ #
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
      - ./rabbitmq/log:/var/log/rabbitmq
